#include<bits/stdc++.h>
using namespace std;

int solve(string s, string t) {

        int n = s.length();
        int m = t.length();

        vector<vector<int>> dp(n+1, vector<int> (m+1, 0));

        // base case if one of the string is finish we return the length of the rest of the other string length
        // thats why if i =0 we return j and if j =0 we return i;

        for(int i=0; i<=n; i++)
        {
            for(int j=0; j<=m; j++)
            {
                if(i == 0) dp[i][j] = j;
                if(j == 0) dp[i][j] = i;
            }
        }

        // now we check for the string
        for(int i=1; i<=n; i++)
        {
            for(int j=1; j<=m; j++)
            {
                // if we foud elements are same we move forwared
                if(s[i-1] == t[j-1]) dp[i][j] = dp[i-1][j-1];
                else
                {
                    // if we replace it means we dont do anything so basically we cna move;
                    int replace = 1 + dp[i-1][j-1];
                    // if we insert element menas we have one steps ahead so check for back position in other string
                    int insert = 1 + dp[i][j-1];
                    // deltes then we move one step forward and check for the others
                    int deletes = 1 + dp[i-1][j];
                    // we have to return the minimum of it
                    dp[i][j] = min({replace,insert, deletes});
                }
            }
        }
        return dp[n][m];
        // Code here
    }
    int main()
    {

        string s, t;
        cin >> s ;
        cin >> t;
        int ans;
        ans = solve(s, t);
        cout <<"The minimum edit distance (" << ans << ")" << endl;
        return 0;
    }
