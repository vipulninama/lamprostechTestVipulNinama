#include <iostream>
#include<bits/stdc++.h>
using namespace std;

    vector<int> solve(int n, vector<int>& arr) {
        vector<int> dp(n ,1); 
        vector<int> hash(n);

        int maxi =0,index =0;

        for(int i =0 ; i< n ; i++){
            hash[i] = i;
            for(int j = 0 ; j< i ; j++){

                 // if we find a value with lesser then that then we can check after changing we can make longest or not if we make
                 // then update it otherwise don't
                if(arr[j] < arr[i] && dp[i] < 1+dp[j]){
                dp[i]  = 1+ dp[j];
                hash[i]= j;
                }
            }
            // check the maximum index we want 
            if(dp[i] > maxi){
                maxi = dp[i];
                index = i;
            }
        }
        
        // printing ad longest increasing subsequence 
        vector<int> ans;
        while(hash[index] != index){
            ans.push_back(arr[index]);
            index = hash[index];
        }
        ans.push_back(arr[index]);

        int start = 0, end = ans.size() - 1;
        while(start <= end)
        {
            swap(ans[start], ans[end]);
            start++;
            end--;
        }
        return ans;
    }

int main()
{
    int n;
    cin >> n;
    vector<int> arr(n);
    for(int i=0; i<n; i++)
    {
        cin >> arr[i];
    }

    vector<int> ans;
    ans = solve(n, arr);

    cout << "([" << " ";
    for(int i=0; i<ans.size() - 1; i++)
    {
        cout << ans[i] << ", ";
    }
    cout << ans[ans.size() - 1] << "])";

    return 0;
}
